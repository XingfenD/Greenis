/**
 * @file ./inc/server/conn.h
 * @brief Defines the Conn class for managing network connection states and data transmission.
 *
 * @author Fendy (xingfen.star@gmail.com)
 * @version 1.0
 * @date 2025-03-13
 * @copyright Copyright (c) 2025
 *
 * @details The Conn class encapsulates a file descriptor, read/write status, and input/output buffers. It provides methods to handle new connection acceptance, reading from and writing to sockets, and closing connections. This class simplifies the complexity of responding to network events by providing a high-level interface over low-level socket operations, making it easier to develop network applications. Key functionalities include:
 * - Accepting new connections via the `handle_accept` method.
 * - Processing incoming data through the `try_one_request` method.
 * - Writing response data with the `handle_write` method.
 * - Reading data from the client using the `handle_read` method.
 * - Managing internal states such as whether to read (`want_read`), write (`want_write`), or close (`want_close`) the connection.
 *
 * The class also disables copy constructor and assignment operator to ensure proper resource management, while supporting move semantics for efficient transfer of resources.
 */

#ifndef CONN_H
#define CONN_H

#include <vector>
#include <buffer.h>
#include <list.h>

struct Conn {
    int fd = -1;
    /* application's intention, for the event loop */
    bool want_read = false;
    bool want_write = false;
    bool want_close = false;

    /* buffered input and output */
    Buffer incoming;  /* data to be parsed by the application */
    Buffer outgoing;  /* responses generated by the application */

    /* timer */
    uint64_t last_active_ms = 0;
    DList idle_node;
};

int32_t handle_accept(int fd);
bool try_one_request(Conn *conn);
void handle_write(Conn *conn);
void handle_read(Conn *conn);
void conn_destroy(Conn *conn);

#endif /* !CONN_H */
